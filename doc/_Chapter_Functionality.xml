<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Functionality">
<Heading>Functionality</Heading>

<P/>
<Section Label="Chapter_Functionality_Section_Example_Methods">
<Heading>Example Methods</Heading>

<P/>
This section will describe the example
methods of BlissInterface
<ManSection>
  <Func Arg="n, outneigh, colours, isdirected" Name="BlissGraphCanonicalLabeling" />
 <Returns>The pair <C>[gens,cl]</C> as GAP object, where <C>gens</C> is a list of generators for <C>Aut(G)</C> and <C>cl</C> is a canonical labeling of <C>G</C>.
</Returns>
 <Description>
We construct the coloured graph <C>G</C> on <A>n</A> vertices <C>[1..n]</C>.
If <A>isdirected</A> is <C>true</C> the <C>G</C> is directed. <C>G</C> is
given by the list <C>[N_1,...,N_n]</C>, where <C>N_i</C> is the list of
(out)neighbors of the vertex <C>i</C>. Duplicate edges between vertices
are ignored.
<P />If <A>colours</A> is a list of length <C>n</C> then its elements are used to
define a vertex coloring of <C>G</C>, otherwise all vertices have colour <C>0</C>.
<P />This function has a nonchecking version <C>BLISS_GRAPH_CANONICAL_LABELING</C>
with the same parameters. Clearly, the nonchecking version is slightly faster
but it must be used with extreme care. Bad parameters may result unpredictable
behaviour.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n, m, outneigh, ucolours, lcolours" Name="BlissBipartiteCanonicalLabeling" />
 <Returns>The pair <C>[gens,cl]</C> as GAP object, where <C>gens</C> is a list of generators for <C>Aut(G)</C> and <C>cl</C> is a canonical labeling of <C>G</C>.
</Returns>
 <Description>
Blabla.
 </Description>
</ManSection>


</Section>


</Chapter>

