@Chapter Usage of the package

This section will describe the funtions of <Package>glabella</Package>, and their nonchecking counterparts. 

@Section Theory

Let $\Gamma$ be a graph on the set $\{1,\ldots,n\}$ of vertices. $G$ may be directed or not; loops and duplicate edges are ignored. The graph is given by the list of its adjacencies $N_1,\ldots,N_n$, where $N_i$ is the set of (out)neighbors of the vertex $i$. For an undirected simple graph, the list of adjacencies must be symmetric, that is, $i \in N_j$ if and only if $j\in N_i$. 

A vertex colouring of $\Gamma$ can be given in two different formats. The <E>plain</E> format is a list $c_1,\ldots,c_n$ of integers; $c_i$ being the colour of the vertex $i$. The <E>nauty</E> format consists of two lists: $u_1,\ldots,u_n$ is a permutation of $\{1,\ldots,n\}$, and $s_1,\ldots,s_n \in \{0,1\}$. The second list indicates the division of the vertices into colours: if $s_i=0$, then a colour class ends at position $i$. For example, the lists
$$u=[3,4,6,7,2,1,5,8,9], \quad s=[0,0,1,1,1,0,1,1,0]$$
represent the colour classes $\{\{3\},\{4\},\{1,2,6,7\},\{5,8,9\}\}$. In plain format, the same colouring can be given by the list $c=[1,1,2,3,4,1,1,4,4]$. 

The solver programs (recently bliss 0.73, nauty 2.7R1) compute the generators of the automorphism group of the (coloured) graph $\Gamma$. Moreover a canonical labelling of $\Gamma$ is computed, this is a permutation of the vertices that bring the graph in a canonical format. Isomorphic graphs in canonical format are equal. Notice that canonical labellings can depend on the solver used, the version of the solver, the version of this packages, the version of GAP, parameter settings of the solver, and possibly even the compiler and computer used. 

The solver programs also compute a 32-bit hash value of the graph. The same as above: this hash value is an isomorphy invariant that depends on your software and hardware environment. It also depends on the colouring in bliss, but not in nauty.
 
@Section Solvers

Our suggestion is to use bliss for directed graphs and Traces for undirected graphs. 
 
@Subsection bliss

Very efficient solver, written in C++. Works well for both directed and undirected graphs. 

@Subsection nauty dense graphs

Written in C. Works well for both directed and undirected graphs. Only recommended for small graphs.

@Subsection nauty sparse graphs

Written in C. Works well for both directed and undirected graphs. Not recommended for large graphs with few automorphisms.

@Subsection Traces

Very efficient solver, written in C. It only works for undirected graphs. 